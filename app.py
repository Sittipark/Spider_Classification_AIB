from fastai.vision.all import *
import glob
from random import shuffle
import streamlit as st
import pathlib
from pathlib import Path
pathlib.PosixPath = pathlib.WindowsPath

# Theme
st.markdown("""
    <style>
    body {
        background-color: #1e1e1e;
        color: #ffffff;
    }
    .stButton>button {
        background-color: #ffffff;
        color: #ffffff;
        border: 1px solid #ffffff;
    }
    .stRadio>div {
        background-color: #ffffff;
        color: #ffffff;
        border: 1px solid #ffffff;
        border-radius: 10px;
        padding: 10px;
    }
    .stSidebar .stSelectbox, .stSidebar .stFileUploader {
        background-color: #ffffff;
        color: #ffffff;
        border: 1px solid #ffffff;
    }
    </style>
""", unsafe_allow_html=True)

# Title
st.markdown("<h1 style='color:#ff0000;text-align:center;'>üï∑Ô∏è SPIDER CLASSIFICATION üï∑Ô∏è</h1>", unsafe_allow_html=True)

# Load model
path = Path()
learn_inf = load_learner(path/'vgg19_model_2.pkl', cpu=True)

def get_spider_info(spider_name):
    spider_info = {
        "black_widow": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡πÅ‡∏°‡πà‡∏°‡πà‡∏≤‡∏¢‡∏î‡∏≥‡∏°‡∏µ‡∏û‡∏¥‡∏©‡πÅ‡∏£‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ô‡∏î‡∏µ‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡∏î‡∏≥‡πÄ‡∏á‡∏≤‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡πâ‡∏≠‡∏á",
        "blue_tarantula": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡∏ó‡∏≤‡∏•‡∏±‡∏ô‡∏ó‡∏π‡∏•‡∏≤‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏µ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏™‡∏î‡πÉ‡∏™‡∏ó‡∏±‡πà‡∏ß‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ ‡∏°‡∏±‡∏Å‡∏û‡∏ö‡πÉ‡∏ô‡∏õ‡πà‡∏≤‡∏ù‡∏ô‡πÄ‡∏Ç‡∏ï‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà",
        "bold_jumper": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÑ‡∏î‡πâ‡πÑ‡∏Å‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡∏°‡∏µ‡∏ï‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ",
        "brown_grass_spider": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡πÅ‡∏°‡πà‡∏°‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡πÉ‡∏´‡∏ç‡πà ‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡∏´‡∏ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏•‡πà‡∏á ‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ö‡∏ô‡∏ï‡∏±‡∏ß",
        "brown_recluse_spider": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡∏™‡∏±‡∏ô‡πÇ‡∏î‡∏©‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏°‡∏µ‡∏û‡∏¥‡∏©‡πÅ‡∏£‡∏á ‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤‡∏¢‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏£‡∏π‡∏õ‡πÑ‡∏ß‡πÇ‡∏≠‡∏•‡∏¥‡∏ô‡∏ö‡∏ô‡∏´‡∏•‡∏±‡∏á",
        "deinopis_spider": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡∏´‡∏ß‡πà‡∏≤‡∏ô‡πÅ‡∏´‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏¢‡πÅ‡∏´‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡πÄ‡∏´‡∏¢‡∏∑‡πà‡∏≠ ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡∏¢‡∏∂‡∏î‡πÉ‡∏¢‡πÅ‡∏´‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏≤‡∏´‡∏ô‡πâ‡∏≤",
        "golden_orb_weaver": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡πÉ‡∏¢‡∏ó‡∏≠‡∏á‡∏ó‡πâ‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏ô‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏™‡∏µ‡∏ó‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢",
        "hobo_spider": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡πÄ‡∏°‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á‡∏°‡∏µ‡∏û‡∏¥‡∏©‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ú‡∏•‡∏û‡∏∏‡∏û‡∏≠‡∏á ‡∏°‡∏µ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡∏û‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£",
        "huntsman_spider": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏≤‡∏ß‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏•‡∏∞‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß ‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î ‡∏°‡∏±‡∏Å‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡∏£‡πâ‡∏≠‡∏ô",
        "ladybird_mimic_spider": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏á‡πÄ‡∏ï‡πà‡∏≤‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏á‡πÄ‡∏ï‡πà‡∏≤ ‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏™‡∏î‡πÉ‡∏™ ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏µ‡πÅ‡∏î‡∏á ‡∏™‡∏µ‡∏î‡∏≥ ‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡∏ö‡∏ô‡∏´‡∏•‡∏±‡∏á",
        "peacock_spider": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡∏ô‡∏Å‡∏¢‡∏π‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏™‡∏î‡πÉ‡∏™‡πÅ‡∏•‡∏∞‡∏•‡∏ß‡∏î‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏ô‡∏Å‡∏¢‡∏π‡∏á ‡∏û‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏≠‡∏™‡πÄ‡∏ï‡∏£‡πÄ‡∏•‡∏µ‡∏¢",
        "red_knee_tarantula": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡∏ó‡∏≤‡∏•‡∏±‡∏ô‡∏ó‡∏π‡∏•‡∏≤‡πÄ‡∏Ç‡πà‡∏≤‡πÅ‡∏î‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡∏°‡∏µ‡∏™‡∏µ‡∏î‡∏≥‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÅ‡∏ñ‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≤ ‡∏°‡∏±‡∏Å‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡∏£‡πâ‡∏≠‡∏ô",
        "spiny_backed_orb_weaver": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏á‡πà‡∏á‡∏ö‡∏ô‡∏´‡∏•‡∏±‡∏á ‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏™‡∏î‡πÉ‡∏™ ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏µ‡πÅ‡∏î‡∏á ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß",
        "white_knee_tarantula": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡∏ó‡∏≤‡∏•‡∏±‡∏ô‡∏ó‡∏π‡∏•‡∏≤‡πÄ‡∏Ç‡πà‡∏≤‡∏Ç‡∏≤‡∏ß‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡∏°‡∏µ‡∏™‡∏µ‡∏î‡∏≥‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÅ‡∏ñ‡∏ö‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤ ‡∏û‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÉ‡∏ï‡πâ",
        "yellow_garden_spider": "‡πÅ‡∏°‡∏á‡∏°‡∏∏‡∏°‡∏™‡∏ß‡∏ô‡∏™‡∏µ‡∏î‡∏≥‡∏ó‡∏≠‡∏á‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏™‡∏µ‡∏î‡∏≥‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏™‡∏î‡πÉ‡∏™ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏ô‡∏™‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î"
    }
    return spider_info.get(spider_name, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏ö")

def predict(img, learn):
    # Make prediction
    pred, pred_idx, pred_prob = learn_inf.predict(img)
    # Get spider information
    spider_info = get_spider_info(pred)
    # Display the prediction
    st.success(f"This is {pred} with the probability of {pred_prob[pred_idx]*100:.02f}%")
    st.info(spider_info)
    # Display the test image
    st.image(img, use_column_width=True)

##################################
# Sidebar
##################################
# Sidebar title
st.sidebar.markdown("<h3>Enter spider to classify</h3>", unsafe_allow_html=True)

# Image source selection
option = st.sidebar.radio('', ['Use a validation image', 'Use your own image'])
valid_images = glob.glob('SPIDER_DATASET/valid/*')
shuffle(valid_images)

if option == 'Use a validation image':
    st.sidebar.write('### Select a validation image')
    fname = st.sidebar.selectbox('', valid_images)
    img = PILImage.create(fname)
else:
    st.sidebar.write('### Select an image to upload')
    uploaded_file = st.sidebar.file_uploader('', type=['png', 'jpg', 'jpeg'], accept_multiple_files=False)
    if uploaded_file is not None:
        img = PILImage.create(uploaded_file)
    else:
        img = PILImage.create(valid_images[0])

# Infer
if img:
    predict(img, learn_inf)
